#!/bin/bash
#----------------------------------------------------------------------------------
# Скрипт для манипуляций с облачным хранилищем Amazon Web Services (AWS) Glacier
# Для получения кратких инструкций по использованию запустите его без параметров
#----------------------------------------------------------------------------------

# Коды завершения процедур
readonly S_SUCCESS=0
readonly S_OK=0
readonly S_NO=1
readonly E_FAIL=1
readonly E_CANCELLED=2
readonly E_NOSUCHOBJECT=3
readonly E_ALREADYEXISTS=4
readonly E_NOTREADYYET=5

# Коды состояния заданий для AWS Glacier
readonly JST_INPROGRESS=0
readonly JST_COMPLETED=1
readonly JST_FAILED=2
readonly JST_CANCELLED=3


_() {
    gettext -d mpolk-glacier -s "$*"
} #_


assertRWAccess() {
    if [ -n "$READONLY" ]; then
	_ "No write access to DB! Operation aborted."
	return $E_FAIL
    fi

    return $S_OK
} #assertRWAccess


trace() {
    [ -n "$DEBUG" ] && echo "[DEBUG] $*"
} #trace


sql() {
    sqlite3 $DB "$*"
} #sql


parseJson() {
    ARGS=$@
    while read LINE; do
	trace "LINE=$LINE"
	set -- $ARGS
	while [ $# -gt 0 ]; do
	    VAR=${1%%:*}
	    FIELD=${1#*:}
	    trace "#=$#; VAR=$VAR; FIELD=$FIELD"
	    shift
	    if grep -Pq "^\s*\"$FIELD\":\s\"(\S+)\",?\s*$" <<<$LINE; then
		eval $VAR=$(grep -Po '(?<=":\s")[^"]+' <<<$LINE) #"
		trace "$VAR:=${!VAR}"
		break
	    fi
	    if grep -Pq "^\s*\"$FIELD\":\s(\S+),?\s*$" <<<$LINE; then
		eval $VAR=$(grep -Po '(?<=":\s)[^,]+' <<<$LINE) #'
		trace "$VAR:=${!VAR}"
		break
	    fi
	done
    done
} #parseJson


upload() {
    assertRWAccess || return $E_FAIL

    FILENAME=$(basename $1)
    DIR=$(dirname $(readlink -e $1))
    FSIZE=$(stat -L -c%s $1)
    CTIME=$(stat -L -c%W $1)
    MTIME=$(stat -L -c%Y $1)
    #read CHECKSUM DUMMY <<<$(sha256sum $1)
    echo -n "$1 -> $VAULT ... "
    REPLY=$(\
	aws glacier upload-archive --account-id=- --archive-description="$DIR/$FILENAME" --output=json $DEBUG \
	    --vault-name="$VAULT" --region="$AWS_DEFAULT_REGION" --body="$1" \
#	    --vault-name="$VAULT" --checksum="$CHECKSUM" --region="$AWS_DEFAULT_REGION" --body="$1" \
    )
    if [ $? != 0 ]; then
	echo
	_ "Upload failed!"
	return $E_FAIL
    fi
    echo OK

    parseJson ARCHIVE_ID:archiveId CHECKSUM:checksum LOCATION:location <<< "$REPLY"

    sql "INSERT INTO archives(id, vault_id, filename, dir, fsize, ctime, mtime, checksum, location) \
	    VALUES ('$ARCHIVE_ID', 1, '$FILENAME', '$DIR', $FSIZE, $CTIME, $MTIME, '$CHECKSUM', '$LOCATION')"
    trace "ArchiveID: $ARCHIVE_ID"
    trace "CheckSum:  $CHECKSUM"
    trace "Location:  $LOCATION"
} #upload


makeFileFilter()
{
    local FILTER=""
    if [ $# -gt 0 ]; then
	while [ -n "$1" ]; do
	    FILENAME=$(basename $1 | sed 's/\*/%/g; s/\?/_/g')
	    DIR=$(dirname $1 | sed 's/\*/%/g; s/\?/_/g')
	    [ -n "$FILTER" ] && FILTER="$FILTER OR "
	    FILTER="$FILTER(filename LIKE '$FILENAME'"
	    [ "$DIR" != "." ] && FILTER="$FILTER AND dir LIKE '$DIR'"
	    FILTER="$FILTER)"
	    shift
	done
	FILTER="($FILTER)"
    fi

    echo -n $FILTER
} #makeFileFilter


makeFileFilterWithAnd()
{
    local FILTER=$(makeFileFilter $@)
    [ -n "$FILTER" ] && FILTER="AND $FILTER"
    echo -n $FILTER
} #makeFileFilterWithAnd


askYesNo() {
    [ -z "$CHECKONLY" ] || return $S_NO
    [ -n "$ALWAYSYES" ] && return $S_OK
    
    read -p "$1 (y/N) "
    SHOPT_RESTORE=$(shopt -p nocasematch)
    shopt -qs nocasematch
    case $REPLY in
	y|yes|д|да|1)
	    $SHOPT_RESTORE
	    return $S_OK
	    ;;
	*)
	    $SHOPT_RESTORE
	    return $S_NO
	    ;;
    esac
} #askYesNo


list() {
    trace "ARGS=\"$*\""
    FILTER1=
    [ -z "$SHOWALL" ] && FILTER1='NOT is_deleted'
    trace "filter1=\"$FILTER1\""
    FILTER2=$(makeFileFilter $@)
    trace "filter2=\"$FILTER2\""
    FILTER=
    if [ -n "$FILTER1" -o -n "$FILTER2" ]; then
	FILTER="WHERE $FILTER1"
	[ -n "$FILTER1" -a -n "$FILTER2" ] && FILTER="$FILTER AND"
	FILTER="$FILTER $FILTER2"
    fi
    trace "filter=\"$FILTER\""

    case "$LSMODE" in
	LONG | VERY_LONG)
	    echo
	    ;;
    esac

    ROWS=$(\
	sql "SELECT filename, dir, ctime, mtime, fsize, id, checksum, is_deleted FROM archives \
		 $FILTER ORDER BY dir, filename" \
    )
    N=0
    TOTAL=0
    [ -n "$ROWS" ] && while IFS="|" read NAME DIR CTIME MTIME FSIZE ARCHIVE_ID CHECKSUM IS_DELETED; do
	CTIME=$(date --date=@$CTIME +"%Y-%m-%d %H:%M:%S")
	MTIME=$(date --date=@$MTIME +"%Y-%m-%d %H:%M:%S")
	MARK=
	[ "$IS_DELETED" -ne 0 ] && MARK="(-)"
	[ -n "$DIR" ] && DIR="$DIR/"
	case "$LSMODE" in
	    LONG)
		printf "%12d  %s  %s%s%s\n" "$FSIZE" "$MTIME" "$MARK" "$DIR" "$NAME"
		;;
	    VERY_LONG)
		printf "%12d  %s  %s  %s%s%s\n" "$FSIZE" "$CTIME" "$MTIME" "$MARK" "$DIR" "$NAME"
		printf "     id: %s\n" "$ARCHIVE_ID"
		printf "     checksum: %s\n" "$CHECKSUM"
		;;
	    *)
		echo $MARK$NAME;;
	esac
	((N++))
	((TOTAL+=$FSIZE))
    done <<< "$ROWS"

    case "$LSMODE" in
	LONG | VERY_LONG)
	    printf "$(_ "\n    Total %d MiB in %d archives\n\n")" $(($TOTAL/1024/1024)) $N
	    ;;
    esac
} #list


listJobs() {
    FILTER=""
    [ -z "$SHOWALL" ] && FILTER="AND status = $JST_INPROGRESS"

    trace "filter=\"$FILTER\""
    sql "SELECT jobs.id, submission_time, filename, dir, status FROM jobs \
	    LEFT JOIN archives ON archives.id = jobs.archive_id
            WHERE jobs.vault_id = $VAULT_ID $FILTER ORDER BY submission_time" | \
    while IFS="|" read ID TIME NAME DIR STATUS; do
	[ -z "$NAME" ] && NAME=$(_ "<INVENTORY>")
	TIME=$(date --date=@$TIME +"%Y-%m-%d %H:%M:%S")
	[ -n "$DIR" ] && DIR="$DIR/"
	case "$STATUS" in
	    $JST_INPROGRESS) STATUS=$(_ "in-progress");;
	    $JST_COMPLETED)  STATUS=$(_ "completed");;
	    $JST_FAILED)     STATUS=$(_ "failed");;
	    $JST_CANCELLED)  STATUS=$(_ "cancelled");;
	esac
	if [ -z "$SHOWALL" ]; then
	    printf "%s  %s%s\n" "$TIME" "$DIR" "$NAME"
	else
	    printf "%s  %-14s %s%s\n" "$TIME" "$STATUS" "$DIR" "$NAME"
	fi
	case "$LSMODE" in
	    VERY_LONG)
		printf "     id: %s\n" "$ID"
		;;
	    *)
		;;
	esac
    done
} #listJobs


remove() {
    assertRWAccess || return $E_FAIL

    FILENAME=$(basename $1)
    DIR=$(dirname $1)

    QUERY="SELECT count(*) FROM archives WHERE NOT is_deleted AND filename = '$FILENAME'"
    if [ "$DIR" != "." ]; then
	QUERY="$QUERY AND dir = '$DIR'"
    fi
    COUNT=$(sql "$QUERY")

    case $COUNT in
	0)
	    printf "$(_ "No such archive: %s!")\n" $1
	    return $E_NOSUCHOBJECT
	    ;;
	1)
	    printf "$(_ "Really delete archive %s? Are you sure? (yes/no) ")" $1
	    while true; do
		read
		case "$REPLY" in
		    yes) break;;
		    no) return $E_CANCELLED;;
		    *) echo -n "  yes or no? ";;
		esac
	    done
	    ;;
	*)
	    printf "$(_ "Found %d archive(s) with the name %s. Are you sure you want to delete them all (yes/no) ")" $COUNT $1
	    while true; do
		read
		case "$REPLY" in
		    yes) break;;
		    no) return $E_CANCELLED;;
		    *) echo -n "  yes or no? ";;
		esac
	    done
	    printf "$(_ "Are you sure you want to delete all %d acrhives?? (yes/no) ")" $COUNT
	    while true; do
		read
		case "$REPLY" in
		    yes) break;;
		    no) return $E_CANCELLED;;
		    *) echo -n "  yes or no? ";;
		esac
	    done
	    ;;
    esac

    QUERY="SELECT id FROM archives WHERE NOT is_deleted AND filename = '$FILENAME'"
    [ "$DIR" != "." ] && QUERY="$QUERY AND dir = '$DIR'"
    trace $QUERY
    IDS=$(sql "$QUERY")

    while read ARCHIVE_ID; do
	printf "$(_ "Deleting archive \"%s\"")" $ARCHIVE_ID
	if aws glacier delete-archive --account-id=- --archive-id="$ARCHIVE_ID" $DEBUG \
	     --vault-name="$VAULT" --region="$AWS_DEFAULT_REGION"
	then
	    sql "UPDATE archives SET is_deleted = 1 WHERE id = '$ARCHIVE_ID'"
	fi
    done <<<"$IDS"
} #remove


requestInventory() {
    assertRWAccess || return $E_FAIL
    
    COUNT=$(sql "SELECT count(1) FROM jobs WHERE vault_id = $VAULT_ID AND archive_id IS NULL AND status = $JST_INPROGRESS") #"
    if [ $COUNT != 0 -a -z "$FORCE" ]; then
	_ "Inventory request already sent to AWS."
	_ "Sending another request usually does not make any sense."
	_ "If you still believe sending one more request is required, add \"-f\" option."
	return $E_ALREADYEXISTS
    fi

    REPLY=$(\
	aws glacier initiate-job --account-id=- --output=json $DEBUG \
	    --vault-name="$VAULT" --region="$AWS_DEFAULT_REGION" \
	    --job-parameters="{\"Type\": \"inventory-retrieval\", \"Format\": \"CSV\"}" \
    )
    if [ $? != 0 ]; then
	_ "Job initialization failed!"
	return $E_FAIL
    fi

    parseJson JOB_ID:jobId LOCATION:location <<< "$REPLY"

    [ $COUNT != 0 ] && sql "UPDATE jobs SET status = $JST_CANCELLED \
                                WHERE vault_id = $VAULT_ID AND archive_id IS NULL AND status = $JST_INPROGRESS"
    sql "INSERT INTO jobs(id, vault_id, submission_time, location) \
	    VALUES ('$JOB_ID', $VAULT_ID, $(date +%s), '$LOCATION')"
    _ "Inventory request sent to AWS"
} #requestInventory


loadInventory() {
    _ "Trying to reload storage inventory results..."
    assertRWAccess || return $E_FAIL

    local JOB_ID=$(sql \
	"SELECT id FROM jobs \
             WHERE vault_id = $VAULT_ID AND archive_id IS NULL AND status = $JST_INPROGRESS \
             ORDER BY submission_time DESC \
             LIMIT 1")
    trace "JOB_ID=$JOB_ID"

    local REPLY=$(\
	aws glacier describe-job --account-id=- --output=json $DEBUG \
	    --vault-name="$VAULT" --region="$AWS_DEFAULT_REGION" \
	    --job-id="$JOB_ID" \
    )
    if [ $? != 0 ]; then
	_ "Job status request failed!"
	sql "UPDATE jobs SET status = $JST_FAILED WHERE id = '$JOB_ID'"
	return $E_FAIL
    fi

    parseJson COMPLETED:Completed <<< "$REPLY"
    trace "COMPLETED=$COMPLETED"
    if [ "$COMPLETED" != "true" ]; then
	_ "Inventory request is not fulfilled yet, data is not refreshed"
	return $E_NOTREADYYET
    fi

    local TMPFILE=$(mktemp --tmpdir glacier-inventory-XXXXXXXX.csv)
    REPLY=$(\
	aws glacier get-job-output --account-id=- --output=json $DEBUG \
	    --vault-name="$VAULT" --region="$AWS_DEFAULT_REGION" \
	    --job-id="$JOB_ID" $TMPFILE \
    )
    if [ $? != 0 ]; then
	_ "Inventory results load failed!"
	return $E_FAIL
    fi

    local QUERY="
	BEGIN;
	DELETE FROM inventory WHERE vault_id = $VAULT_ID;
	"
    I=0
    while read LINE; do
	((I++ == 0)) && continue
	trace $LINE
	IFS=',' read ARCHIVE_ID DESCRIPTION CTIME SIZE CHECKSUM <<<"$LINE"
	trace "ARCHIVE_ID=$ARCHIVE_ID"
	DESCRIPTION=${DESCRIPTION#\"}
	DESCRIPTION=${DESCRIPTION%\"}
	trace "DESCRIPTION=$DESCRIPTION"
	CTIME=$(date --date="$CTIME" +%s)
	trace "CTIME=$CTIME"
	trace "SIZE=$SIZE"
	trace "CHECKSUM=$CHECKSUM"
	QUERY="$QUERY
	    INSERT INTO inventory(vault_id, seq_no, archive_id, description, ctime, size, checksum)
		VALUES ($VAULT_ID, $I, '$ARCHIVE_ID', '$DESCRIPTION', $CTIME, $SIZE, '$CHECKSUM');
	"
    done < $TMPFILE

    QUERY="$QUERY
	UPDATE jobs SET status = $JST_COMPLETED WHERE id = '$JOB_ID';
        UPDATE vaults SET inventory_time = $(date +%s);
	COMMIT"
    trace $QUERY
    sql $QUERY
    rm $TMPFILE
    return $S_OK
} #loadInventory


checkInventoryInternal()
{
    INVENTORY_TIME=$(sql "SELECT inventory_time FROM vaults WHERE id = $VAULT_ID")
    COUNT=$(sql "SELECT count(1) FROM jobs WHERE vault_id = $VAULT_ID AND archive_id IS NULL AND status = $JST_INPROGRESS") #"
    if [ -z "$INVENTORY_TIME" -a $COUNT == 0 ]; then
	_ "No inventory was completed yet."
	_ "Now inventory will be requested."
	_ "Its result will be ready after some hours."
	requestInventory
	return $E_NOTREADYYET
    fi

    if [ $COUNT != 0 ]; then
	loadInventory && INVENTORY_TIME=$(sql "SELECT inventory_time FROM vaults WHERE id = $VAULT_ID")
    fi

    if [ -z "$INVENTORY_TIME" ]; then
	_ "No inventory was completed yet."
	_ "Storage inventory was requested before, but its results could not be loaded."
	_ "Try to request an inventory once more."
	return $E_FAIL
    fi
    
    return $S_OK
} #checkInventoryInternal


checkInventory()
{
    COUNT=$(sql "SELECT count(1) FROM jobs WHERE vault_id = $VAULT_ID AND archive_id IS NULL AND status = $JST_INPROGRESS") #"
    if [ $COUNT == 0 ]; then
	_ "Currently there are no outstanding inventory requests"
	return $E_FAIL
    fi

    loadInventory && _ "Inventory results loaded successfully"
} #checkInventory


showInventory() {
    checkInventoryInternal || return $?

    printf "$(_ "Inventory of %s\n")" "$(date --date=@$INVENTORY_TIME +"%Y-%m-%d %H:%M")"
    echo
    N=0
    TOTAL=0
    ROWS=$(sql "SELECT archive_id, description, ctime, size, checksum FROM inventory \
	             WHERE vault_id = $VAULT_ID ORDER BY seq_no")
    while IFS='|' read ARCHIVE_ID DESCRIPTION CTIME SIZE CHECKSUM; do
	CTIME=$(date --date=@$CTIME +"%Y-%m-%d %H:%M:%S")
	case $LSMODE in
	    LONG)
		printf "%12d  %s  %s\n" "$SIZE" "$CTIME" "$DESCRIPTION"
		;;
	    VERY_LONG)
		printf "%12d  %s  %s\n" "$SIZE" "$CTIME" "$DESCRIPTION"
		printf "     id: %s\n" "$ARCHIVE_ID"
		printf "     checksum: %s\n" "$CHECKSUM"
		;;
	    *)
		echo $DESCRIPTION;;
	esac
	((N++))
	((TOTAL+=$SIZE))
    done <<<"$ROWS"
    printf "$(_ "\n    Total %d MiB in %d archives\n\n")" $(($TOTAL/1024/1024)) $N
} #showInventory


synchronize() {
    [ -z "$CHECKONLY" ] && ! assertRWAccess && return $E_FAIL
    checkInventoryInternal || return $?

    ROWS=$(\
	sql "SELECT archive_id, description, size, checksum FROM inventory \
		 WHERE vault_id = $VAULT_ID ORDER BY seq_no" \
    )
    while IFS='|' read -u3 ARCHIVE_ID DESCRIPTION SIZE CHECKSUM; do
	CAT_ROW=$(sql "SELECT filename, dir, checksum, fsize, is_deleted FROM archives \
	                  WHERE id = '$ARCHIVE_ID'")
	NAME=$(basename "$DESCRIPTION")
	DIR=$(dirname "$DESCRIPTION")
	[ "$DIR" == '.' ] && DIR=
	
	if [ -z "$CAT_ROW" ]; then
	    printf "$(_ "Archive \"%s\" presents in Glacier, but its record is missing from the directory\n")" $DESCRIPTION
	    askYesNo "$(_ "Record it to the directory?")" || continue
	    if [ -z "$DIR" ]; then
		DIR=NULL
	    else
		DIR="'$DIR'"
	    fi
	    sql "INSERT INTO archives(id, vault_id, filename, dir, fsize, checksum) \
	             VALUES ('$ARCHIVE_ID', $VAULT_ID, '$NAME', $DIR, $SIZE, '$CHECKSUM')"
	    continue
	fi
	
	IFS='|' read NAME0 DIR0 CHECKSUM0 FSIZE0 IS_DELETED <<<"$CAT_ROW"
	trace "NAME0=$NAME0"
	trace "DIR0=$DIR0"
	trace "CHECKSUM0=$CHECKSUM0"
	trace "FSIZE0=$FSIZE0"
	trace "IS_DELETED=$IS_DELETED"
	if [ "$IS_DELETED" != 0 ]; then
	    printf "$(_ "Archive \"%s\" presents in Glacier, but is removed from the directory\n")" $DESCRIPTION
	    askYesNo "$(_ "Restore it?")" && sql "UPDATE archives SET is_deleted = 0 WHERE id = '$ARCHIVE_ID'"
	fi
	
	if [ "$NAME0" != "$NAME" ]; then
	    printf "$(_ "Filename of the archive \"%s\" does not match with that in the directory:\n")" $DESCRIPTION
	    printf "$(_ "  In Glacier:        %s\n")" "$NAME"
	    printf "$(_ "  In the directory:  %s\n")" "$NAME0"
	    askYesNo "$(_ "Fix data in the directory?")" && \
		sql "UPDATE archives SET filename = '$NAME' WHERE id = '$ARCHIVE_ID'"
	fi
	
	if [ -n "$DIR" -a "$DIR0" != "$DIR" ]; then
	    printf "$(_ "File path of the archive \"%s\" does not match with that in the directory:\n")" $DESCRIPTION
	    printf "$(_ "  In Glacier:        %s\n")" "$DIR"
	    printf "$(_ "  In the directory:  %s\n")" "$DIR0"
	    askYesNo "$(_ "Fix data in the directory?")" && \
		sql "UPDATE archives SET dir = '$DIR' WHERE id = '$ARCHIVE_ID'"
	fi
	
	if [ "$FSIZE0" != "$SIZE" ]; then
	    printf "$(_ "File size of the archive \"%s\" does not match with that in the directory:\n")" $DESCRIPTION
	    printf "$(_ "  In Glacier:        %s\n")" "$FSIZE"
	    printf "$(_ "  In the directory:  %s\n")" "$FSIZE0"
	    askYesNo "$(_ "Fix data in the directory?")" && \
		sql "UPDATE archives SET fsize = $SIZE WHERE id = '$ARCHIVE_ID'"
	fi
	
	if [ "$CHECKSUM0" != "$CHECKSUM" ]; then
	    printf "$(_ "Checksum of the archive \"%s\" does not match with that in the directory:\n")" $DESCRIPTION
	    printf "$(_ "  In Glacier:        %s\n")" "$CHECKSUM"
	    printf "$(_ "  In the directory:  %s\n")" "$CHECKSUM0"
	    askYesNo "$(_ "Fix data in the directory?")" && \
		sql "UPDATE archives SET checksum = '$CHECKSUM' WHERE id = '$ARCHIVE_ID'"
	fi
    done 3<<<"$ROWS"

    ROWS=$(\
	sql "SELECT id, filename, dir FROM archives \
		 WHERE vault_id = $VAULT_ID AND NOT is_deleted AND \
		    NOT exists( SELECT 1 FROM inventory \
		                   WHERE vault_id = $VAULT_ID AND \
		                         archive_id = archives.id )" \
    )
    [ -n "$ROWS" ] && while IFS='|' read -u3 ARCHIVE_ID NAME DIR; do
	trace "ARCHIVE_ID=$ARCHIVE_ID"
	trace "NAME=$NAME"
	trace "DIR=$DIR"
	[ -n "$DIR" ] && NAME="$DIR/$NAME"
	printf "$(_ "Archive \"%s\" presents in the directory, but is missing from Glacier\n")" $NAME
	askYesNo "$(_ "Delete it from the directory?")" && sql "DELETE FROM archives WHERE id = '$ARCHIVE_ID'"
    done 3<<<"$ROWS"
} #synchronize


requestDownload() {
    assertRWAccess || return $E_FAIL
    trace "ARGS=\"$*\""
    FILTER=$(makeFileFilterWithAnd $@)
    trace "filter=\"$FILTER\""

    ROWS=$(sql "SELECT id, filename, dir FROM archives WHERE NOT is_deleted AND vault_id = $VAULT_ID $FILTER")
    if [ -z "$ROWS" ]; then
	_ "There is no such file(s) in the directory!"
	return $E_FAIL
    fi

    while IFS='|' read ARCHIVE_ID NAME DIR; do
	[ -n "$DIR" ] && DIR="$DIR/"
	COUNT=$(sql "SELECT count(1) FROM jobs WHERE archive_id = '$ARCHIVE_ID' AND status = $JST_INPROGRESS") #"
	if [ $COUNT != 0 -a -z "$FORCE" ]; then
	    printf "$(_ "Download request for the file %s%s already sent to AWS.\n")" "$DIR" "$NAME"
	    _ "Sending another request usually does not make any sense."
	    _ "If you still believe sending one more request is required, add \"-f\" option."
	    continue
	fi

	REPLY=$(\
	    aws glacier initiate-job --account-id=- --output=json $DEBUG \
		--vault-name="$VAULT" --region="$AWS_DEFAULT_REGION" \
		--job-parameters="{\"Type\": \"archive-retrieval\", \"ArchiveId\": \"$ARCHIVE_ID\"}" \
	)
	if [ $? != 0 ]; then
	    _ "Job initialization failed!"
	    return $E_FAIL
	fi

	parseJson JOB_ID:jobId LOCATION:location <<< "$REPLY"

	[ $COUNT != 0 ] && sql "UPDATE jobs SET status = $JST_CANCELLED
                                    WHERE vault_id = $VAULT_ID AND archive_id = '$ARCHIVE_ID'
				    AND status = $JST_INPROGRESS"
	sql "INSERT INTO jobs(id, vault_id, archive_id, submission_time, location)
	         VALUES ('$JOB_ID', $VAULT_ID, '$ARCHIVE_ID', $(date +%s), '$LOCATION')"

	printf "$(_ "Download request for the file \"%s%s\" sent to AWS\n")" "$DIR" "$NAME"
    done <<< "$ROWS";
} #requestDownload


download() {
    assertRWAccess || return $E_FAIL
    trace "ARGS=\"$*\""

    QUERY="SELECT jobs.id, filename, dir FROM jobs \
               JOIN archives ON archives.id = jobs.archive_id
               WHERE jobs.vault_id = $VAULT_ID AND status = $JST_INPROGRESS"
    if [ -n "$1" ]; then
        FILTER=$(makeFileFilterWithAnd $@)
        trace "filter=\"$FILTER\""
	QUERY="$QUERY $FILTER"
    fi

    ROWS=$(sql "$QUERY")
    if [ -z "$ROWS" ]; then
    	if [ -z "$1" ]; then
	    _ "Currently there are no outstanding download requests!"
	else
	    _ "Currently there are no download requests for this file(s)!"
	    _ "You should request the download with the \"request\" command"
	fi
	return $E_FAIL
    fi

    while IFS='|' read JOB_ID NAME DIR; do
	[ -n "$DIR" ] && DIR="$DIR/"
	REPLY=$(\
	    aws glacier describe-job --account-id=- --output=json $DEBUG \
		--vault-name="$VAULT" --region="$AWS_DEFAULT_REGION" \
		--job-id="$JOB_ID" \
	)
	if [ $? != 0 ]; then
	    _ "Job status request failed!"
	    #sql "UPDATE jobs SET status = $JST_FAILED WHERE id = '$JOB_ID'"
	    return $E_FAIL
	fi

	parseJson COMPLETED:Completed <<< "$REPLY"
	trace "COMPLETED=$COMPLETED"
	if [ "$COMPLETED" != "true" ]; then
	    printf "$(_ "Download request for the file %s%s is not fulfilled yet, file skipped\n")" "$DIR" "$NAME"
	    continue
	fi

	if [ -z "$OUTFILE" ]; then
	    FILE=$DIR$NAME
	elif [ ${OUTFILE: -1} == '/' ]; then
	    FILE=$OUTFILE$NAME
	else
	    FILE=$OUTFILE
	fi
	I=1
	FILE_ORIG=$FILE
	while [ -a "$FILE" ]; do
	    FILE="$FILE_ORIG.((I++))"
	done
	echo -n "$VAULT:$DIR$NAME -> $FILE ... "
	REPLY=$(\
	    aws glacier get-job-output --account-id=- --output=json $DEBUG \
		--vault-name="$VAULT" --region="$AWS_DEFAULT_REGION" \
		--job-id="$JOB_ID" $FILE \
	)
	if [ $? != 0 ]; then
	    echo
	    printf "$(_ "Failure to download file %s%s!\n")" "$DIR" "$NAME"
	    continue
	fi

	sql "UPDATE jobs SET status = $JST_COMPLETED WHERE id = '$JOB_ID';\
	     UPDATE vaults SET inventory_time = $(date +%s)"
	echo "OK"

    done <<< "$ROWS";
} #download


purgeFiles() {
    COUNT=$(sql "SELECT count(1) FROM archives WHERE is_deleted")
    if [ $COUNT == 0 ]; then
	_ "No deleted files found"
	return $E_NOSUCHOBJECT
    fi

    askYesNo "$(_ "Really purge all deleted files? Are you sure?")" || return $E_CANCELLED

    sql "DELETE FROM archives WHERE is_deleted"
    printf "$(_ "%d deleted files purged\n")" $COUNT
} #purgeFiles



purgeJobs() {
    COUNT=$(sql "SELECT count(1) FROM jobs WHERE status <> 0")
    if [ $COUNT == 0 ]; then
	_ "No completed jobs found"
	return $E_NOSUCHOBJECT
    fi

    askYesNo "$(_ "Really purge all completed jobs? Are you sure?")" || return $E_CANCELLED

    sql "DELETE FROM jobs WHERE status <> 0"
    printf "$(_ "%d completed jobs purged\n")" $COUNT
} #purgeJobs


purge() {
    PURGE_FILES=
    PURGE_JOBS=
    case "$1" in
	al|all)
	    PURGE_FILES=1
	    PURGE_JOBS=1
	    ;;
	"fi"|fil|file|files)
	    PURGE_FILES=1
	    ;;
	jo|job|jobs)
	    PURGE_JOBS=1
	    ;;
	*)
	    _ "You should specify what are going to purge: files|jobs|all"
	    return $E_FAIL
	    ;;
    esac

    [ -n "$PURGE_FILES" ] && purgeFiles
    [ -n "$PURGE_JOBS" ] && purgeJobs
} #purge


initDB() {
    echo -n $(_ "Initializing DB...")
    if sql "\
	PRAGMA foreign_keys=ON;
	CREATE TABLE vaults(id integer primary key, name text, arn text, inventory_time integer); \
	INSERT INTO vaults(id, name) VALUES($VAULT_ID, '$VAULT'); \
	CREATE TABLE archives(id text primary key, vault_id int references vaults(id), \
	                      filename text, dir text, checksum text, location text, \
	                      ctime int default 0, mtime int default 0, fsize int, \
	                      is_deleted boolean default 0); \
	CREATE INDEX archives_by_name on archives (filename); \
	CREATE INDEX archives_by_path on archives (dir, filename); \
	CREATE TABLE jobs(id text not null primary key, vault_id int references vaults(id), \
                          submission_time int, archive_id int references archives(id), location text, \
                          status int default 0); \
	CREATE INDEX jobs_by_archive on jobs(archive_id, submission_time); \
	CREATE INDEX jobs_by_time on jobs(vault_id, submission_time); \
	CREATE TABLE inventory(vault_id int references vaults(id), seq_no integer, archive_id text, \
                               description text, ctime integer, size integer, checksum text, \
                               primary key (vault_id, seq_no)); \
	"
    then
	echo
    else
	echo
	_ "Could not initialize DB!"
	exit $E_FAIL
    fi
} #initDB


showUsage() {
    local SCRIPT=$(basename $0)
    echo
    echo $SCRIPT - $(_ "utility script for manipulation with AWS Glacier storage")
    echo
    _    "  Usage:"
    echo "    $SCRIPT upload <FILE>,..          -- " $(_ "sends file(s) to Glacier")
    echo "    $SCRIPT ls [-lLa] [<FILE>,..]     -- " $(_ "shows a directory listing (what is already uploaded)")
    echo "      -a               -- " $(_ "shows all files (including the deleted ones)")
    echo "    $SCRIPT dir [-lLa] [<FILE>,..]    -- " $(_ "same as \"ls\"")
    echo "    $SCRIPT rm <FILE>,..              -- " $(_ "removes files from Glacier")
    echo "    $SCRIPT del <FILE>,..             -- " $(_ "same as \"rm\"")
    echo "    $SCRIPT request <FILE>,..         -- " $(_ "requests file download from Glacier")
    echo "    $SCRIPT request -                 -- " $(_ "requests Glacier inventory")
    echo "    $SCRIPT download [-o] [<FILE>,..] -- " $(_ "downloads file(s) from Glacier (after request is fulfilled)")
    echo "      -o <OUT-FILE>    -- " $(_ "downloads file with the alternate name/to alternate location")
    echo "    $SCRIPT inventory [-rflLс]        -- " $(_ "shows inventory results")
    echo "      -r               -- " $(_ "requests inventory, same as \"request -\"")
    echo "      -f               -- " $(_ "requests a new inventory even if the previous one is marked as incomplete")
    echo "      -с               -- " $(_ "checks the last inventory request results and store them to DB if they are ready")
    echo "    $SCRIPT sync [-cy]                -- " $(_ "synchronizes directory with the last inventory results")
    echo "      -с               -- " $(_ "checks for mismatches but doesn't write anything to DB")
    echo "      -y               -- " $(_ "implies \"yes\" for all the questions")
    echo "    $SCRIPT jobs [-lLa]               -- " $(_ "shows the list of jobs (requests) for download or inventory")
    echo "      -a               -- " $(_ "shows all jobs (including the completed ones)")
    echo "    $SCRIPT purge files|jobs|all      -- " $(_ "purges deleted files and completed jobs from the directory")
    echo
       _ "  Common options for all comands:"
    echo "      -d               -- " $(_ "debugging mode")
       _ "  Common options for directory listing and inventory commands:"
    echo "      -l               -- " $(_ "long listing mode")
    echo "      -L               -- " $(_ "even longer listing mode")
    echo
} #showUsage


# Here we are starting

# Look for the rc-file with sensitive local settings
RCFILE=$(dirname $0)/.$(basename $0)
[ -f $RCFILE -a -r $RCFILE ] || RCFILE=~/.$(basename $0)
[ -f $RCFILE -a -r $RCFILE ] || RCFILE=/usr/local/etc/$(basename $0)
if [ -f $RCFILE -a -r $RCFILE ]; then
    . $RCFILE
    export AWS_ACCESS_KEY_ID
    export AWS_SECRET_ACCESS_KEY
    export AWS_DEFAULT_REGION
elif [ -z "$VAULT" -o \
       -z "$AWS_ACCESS_KEY_ID" -o \
       -z "$AWS_SECRET_ACCESS_KEY" -o \
       -z "$AWS_DEFAULT_REGION" -o \
       -z "$DB" ]; then
    _ "Cannot read config file!"
    exit $E_FAIL
fi


OPTSTRING=dlLrfcyao:
ARGS=$(getopt $OPTSTRING $*)
if [ $? != 0 ]; then
    showUsage
    exit $E_FAIL
fi

VAULT_ID=1
DEBUG=
FORCE=
INVENTORY_OP=show
SHOWALL=
OUTFILE=
set -- $ARGS
while getopts $OPTSTRING OPTION; do
    case $OPTION in
	d) DEBUG=--debug;;
	l) LSMODE=LONG;;
	L) LSMODE=VERY_LONG;;
	r) INVENTORY_OP=request;;
	f) FORCE=1;;
	c) CHECKONLY=1;;
	y) ALWAYSYES=1;;
	a) SHOWALL=1;;
	o) OUTFILE=$OPTARG;;
    esac
done

shift $(($OPTIND-1))


READONLY=
if [ ! -f $DB ]; then
    initDB
elif [ ! -r $DB ]; then
    _ "No read access to DB!"
    exit $E_FAIL
elif [ ! -w $DB ]; then
    READONLY=1
fi


CMD=$1
case $CMD in
    up|upl|uplo|uploa|upload)
	while shift && [ -n "$1" ]; do
	    upload $1
	done
	;;
    ls|dir)
	shift
	list $@
	;;
    rm|del)
	while shift && [ -n "$1" ]; do
	    remove $1
	done
	;;
    re|req|requ|reque|reques|request)
	shift
	if [ -z "$1" ]; then
	    _ 'The \"request\" command requires a parameter (filename template or \"-\")'
	    exit $E_FAIL
	elif [ "$1" == '-' ]; then
	    requestInventory
	else
	    requestDownload $@
	fi
	;;
    dow|down|downl|downlo|downloa|download)
	shift
	download $@
	;;
    "in"|inv|inve|inven|invent|invento|inventor|inventory)
	if [ $INVENTORY_OP == "request" ]; then
	    requestInventory
	elif [ -n "$CHECKONLY" ]; then
	    checkInventory
	else
	    showInventory
	fi
	;;
    sy|syn|sync)
	synchronize
	;;
    j|jo|job|jobs)
	listJobs
	;;
    pu|pur|purg|purge)
	shift
	purge $@
	;;
    *)
	showUsage
	exit $E_FAIL;;
esac
